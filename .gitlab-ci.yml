stages:
  - pull
  - build
  - lint
  - push
  - deploy
  - cleanup

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

pull:
  stage: pull
  allow_failure: true
  script:
    - docker pull "$CI_REGISTRY_IMAGE":backend
    - docker pull "$CI_REGISTRY_IMAGE":frontend

build:
  stage: build
  script:
    - docker build -f Dockerfile_backend --tag="$CI_PIPELINE_ID":backend --cache-from="$CI_REGISTRY_IMAGE":backend .
    - docker build -f Dockerfile_frontend --tag="$CI_PIPELINE_ID":frontend --cache-from="$CI_REGISTRY_IMAGE":frontend .

lint:
  stage: lint
  allow_failure: true
  only:
    - development
  script:
    - echo $CI_PIPELINE_ID
    - echo $CI_REGISTRY_IMAGE
    - export CI_PIPELINE_ID=$CI_PIPELINE_ID
    - docker-compose -f docker-compose.ci.yml run backend flake8 ./backend

push image:
  stage: push
  only:
    - development
    - tags
  script:
    - docker tag "$CI_PIPELINE_ID":backend "$CI_REGISTRY_IMAGE":backend
    - docker tag "$CI_PIPELINE_ID":frontend "$CI_REGISTRY_IMAGE":frontend
    - docker push "$CI_REGISTRY_IMAGE":backend
    - docker push "$CI_REGISTRY_IMAGE":frontend

push latest:
  stage: push
  script:
    - docker tag "$CI_PIPELINE_ID":backend "$CI_REGISTRY_IMAGE":backend
    - docker tag "$CI_PIPELINE_ID":frontend "$CI_REGISTRY_IMAGE":frontend
    - docker push "$CI_REGISTRY_IMAGE":backend
    - docker push "$CI_REGISTRY_IMAGE":frontend

cleanup:
  stage: cleanup
  when: always
  script:
    - docker rmi -f "$CI_PIPELINE_ID":backend
    - docker rmi -f "$CI_PIPELINE_ID":frontend
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml down --remove-orphans

deploy:
  stage: deploy
  when: manual
  only:
    - development
  script:
    - docker-compose -f docker-compose.deploy.yml pull
    - docker-compose -f docker-compose.deploy.yml down --remove-orphans
    - docker-compose -f docker-compose.deploy.yml up -d
